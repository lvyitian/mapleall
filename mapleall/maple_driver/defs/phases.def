/*
 * Copyright (c) [2019-2020] Huawei Technologies Co., Ltd. All rights reserved.
 *
 * OpenArkCompiler is licensed under the Mulan Permissive Software License v2.
 * You can use this software according to the terms and conditions of the MulanPSL - 2.0.
 * You may obtain a copy of MulanPSL - 2.0 at:
 *
 *   https://opensource.org/licenses/MulanPSL-2.0
 *
 * THIS SOFTWARE IS PROVIDED ON AN "AS IS" BASIS, WITHOUT WARRANTIES OF ANY KIND, EITHER
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO NON-INFRINGEMENT, MERCHANTABILITY OR
 * FIT FOR A PARTICULAR PURPOSE.
 * See the MulanPSL - 2.0 for more details.
 */
// Phase arguments are: name, condition. By default, all phases are required, so the condition value is 'true'.
// You can use condition to control these phases and your custom phases. E.g. ADD_PHASE("custom_phase", option1 == value1 [more conditions...])
if (HasThisPhase(kMpl2mpl)) {
ADD_MODPREPHASE("clone", Options::O2)
ADD_MODPREPHASE("classhierarchy", true)
ADD_MODPREPHASE("ipodevirtulize", true)
ADD_MODPREPHASE("callgraph", true)
ADD_MODPREPHASE("Simplify", Options::O2)
ADD_MODPREPHASE("inline", MeOption::optLevel >= 2 && Options::inlineLev != 3)
ADD_MODPREPHASE("greedyinline", MeOption::optLevel >= 2 && Options::inlineLev == 3)
ADD_MODPREPHASE("vtableanalysis", true)
ADD_MODPREPHASE("reflectionanalysis", true)
ADD_MODPREPHASE("gencheckcast", true)
ADD_MODPREPHASE("JavaLowering", true)
ADD_MODPREPHASE("AnalyzeCtor", true)
ADD_MODPREPHASE("DeCouple", Options::buildApp)
}
// mephase begin
if (HasThisPhase(kMplMe)) {
ADD_MEPHASE("cfgbuild", theModule->IsCModule() && MeOption::optLevel >= 3)
ADD_MEPHASE("injectiv", theModule->IsCModule() && MeOption::optLevel >= 3)
ADD_MEPHASE("ssatab", theModule->IsCModule() && MeOption::optLevel >= 3)
ADD_MEPHASE("aliasclass", theModule->IsCModule() && MeOption::optLevel >= 3)
ADD_MEPHASE("ssa", theModule->IsCModule() && MeOption::optLevel >= 3)
ADD_MEPHASE("dse", theModule->IsCModule() && MeOption::optLevel >= 3)
ADD_MEPHASE("irmapbuild", theModule->IsCModule() && MeOption::optLevel >= 3)
ADD_MEPHASE("ivcanon", theModule->IsCModule() && MeOption::optLevel >= 3)
ADD_MEPHASE("hprop", theModule->IsCModule() && MeOption::optLevel >= 3)
ADD_MEPHASE("hdse", theModule->IsCModule() && MeOption::optLevel >= 3)
ADD_MEPHASE("lfopreemit", theModule->IsCModule() && MeOption::optLevel >= 3)
ADD_MEPHASE("cfgbuild", theModule->IsJavaModule() || MeOption::optLevel >= 1)
ADD_MEPHASE("ssatab", theModule->IsJavaModule() || MeOption::optLevel >= 1)
ADD_MEPHASE("aliasclass", theModule->IsJavaModule() || MeOption::optLevel >= 1)
ADD_MEPHASE("ssa", theModule->IsJavaModule() || MeOption::optLevel >= 1)
ADD_MEPHASE("dse", MeOption::optLevel >= 1)
ADD_MEPHASE("irmapbuild", MeOption::optLevel >= 1 || theModule->IsJavaModule())
ADD_MEPHASE("bdcopt", MeOption::optLevel >= 1 && theModule->IsJavaModule())
ADD_MEPHASE("syncselect", MeOption::optLevel >= 1 && theModule->IsJavaModule())
ADD_MEPHASE("ssadevirt", MeOption::optLevel >= 1 && theModule->IsJavaModule())
ADD_MEPHASE("hprop", MeOption::optLevel >= 1)
ADD_MEPHASE("symrename", MeOption::optLevel >= 1)
ADD_MEPHASE("hdse", MeOption::optLevel >= 1)
ADD_MEPHASE("cfgopt", MeOption::optLevel >= 2 && theModule->IsJavaModule())
ADD_MEPHASE("may2dassign", MeOption::optLevel >= 1 && theModule->IsJavaModule())
ADD_MEPHASE("condbasednpc", MeOption::optLevel >= 1 && theModule->IsJavaModule())
ADD_MEPHASE("epre", MeOption::optLevel >= 2)
ADD_MEPHASE("stmtpre", MeOption::optLevel >= 2 && theModule->IsJavaModule())
ADD_MEPHASE("analyzerc", theModule->IsJavaModule())
ADD_MEPHASE("rclowering", theModule->IsJavaModule())
ADD_MEPHASE("rename2preg", MeOption::optLevel >= 1)
ADD_MEPHASE("lpre", MeOption::optLevel >= 2)
ADD_MEPHASE("emit", true)
}
// mephase end
if (HasThisPhase(kMpl2mpl)) {
ADD_MODPOSTPHASE("GenNativeStubFunc", true)
ADD_MODPOSTPHASE("clinit", true)
ADD_MODPOSTPHASE("VtableImpl", true)
ADD_MODPOSTPHASE("CodeReLayout", Options::O2)
ADD_MODPOSTPHASE("javaehlower", true)
ADD_MODPOSTPHASE("deferralBarrier", Options::deferralBarrier)
ADD_MODPOSTPHASE("barrierinsertion", Options::barrier && !Options::deferralBarrier)
ADD_MODPOSTPHASE("ScalarReplacement", Options::O2)
ADD_MODPOSTPHASE("MUIDReplacement", Options::mapleLinker)
}
