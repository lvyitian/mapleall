#
# Copyright (c) [2020] Huawei Technologies Co., Ltd. All rights reserved.
#
# Licensed under the Mulan Permissive Software License v2.
# You can use this software according to the terms and conditions of the MulanPSL - 2.0.
# You may obtain a copy of MulanPSL - 2.0 at:
#
#     https://opensource.org/licenses/MulanPSL-2.0
#
# THIS SOFTWARE IS PROVIDED ON AN "AS IS" BASIS, WITHOUT WARRANTIES OF ANY KIND, EITHER
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO NON-INFRINGEMENT, MERCHANTABILITY OR
# FIT FOR A PARTICULAR PURPOSE.
# See the MulanPSL - 2.0 for more details.
#

configs = [
        "${MAPLEALL_ROOT}:mapleallcompilecfg",
    ]

include_directories = [
    "${MAPLEALL_ROOT}/maple_me/include",
    "${MAPLEALL_ROOT}/maple_util/include",
    "${MAPLEALL_ROOT}/mempool/include",
    "${MAPLEALL_ROOT}/maple_ipa/include",
    "${MAPLEALL_ROOT}/maple_ir/include",
    "${MAPLEALL_ROOT}/mpl2mpl/include",
    "${HUAWEI_SECURE_C_ROOT}/include",
    "${MAPLEALL_ROOT}/maple_phase/include",
    "${MAPLEALL_ROOT}/maple_driver/include",
]

static_library("libmplme"){
    sources = [
      "src/me_alias_class.cpp",
      "src/me_critical_edge.cpp",
      "src/me_cfg.cpp",
      "src/me_const_prop.cpp",
      "src/me_dominance.cpp",
      "src/me_dse.cpp",
      "src/me_emit.cpp",
      "src/me_function.cpp",
      "src/me_ident_loops.cpp",
      "src/me_bdc_opt.cpp",
      "src/me_hdse.cpp",
      "src/me_cfg_opt.cpp",
      "src/me_hti.cpp",
      "src/me_irmap.cpp",
      "src/me_irmap_build.cpp",
      "src/me_loop_canon.cpp",
      "src/me_phase_manager.cpp",
      "src/me_prop.cpp",
      "src/me_ssa.cpp",
      "src/me_ssa_lpre.cpp",
      "src/me_ssu_pre.cpp",
      "src/me_store_pre.cpp",
      "src/me_rename_to_preg.cpp",
      "src/me_ssa_epre.cpp",
      "src/me_ssa_tab.cpp",
      "src/me_ssa_update.cpp",
      "src/me_option.cpp",
      "src/ssa_devirtual.cpp",
      "src/me_ssa_devirtual.cpp",
      "src/me_placement_opt.cpp",
      "src/me_bb_layout.cpp",
      "src/me_analyzerc.cpp",
      "src/me_rc_lowering.cpp",
      "src/me_stmt_pre.cpp",
      "src/me_stmt_fre.cpp",
      "src/me_lower_globals.cpp",
      "src/me_may_to_dassign.cpp",
      "src/me_condbased_opt.cpp",
      "src/sync_select.cpp",
      "src/ipa_side_effect.cpp",
      "src/me_delegate_rc.cpp",
      "src/me_fsaa.cpp",
      "src/me_sym_rename.cpp",
      "src/me_predict.cpp",
      "src/lfo_mir_lower.cpp",
      "src/lfo_pre_emit.cpp",
      "src/lfo_inject_iv.cpp",
      "src/lfo_iv_canon.cpp",
    ]

    include_dirs = include_directories

    output_dir = "${root_out_dir}/lib/${HOST_ARCH}"
}

static_library("libmplmewpo"){
    sources = [
       "src/alias_class.cpp",
       "src/bb.cpp",
       "src/dominance.cpp",
       "src/dse.cpp",
       "src/hdse.cpp",
       "src/irmap.cpp",
       "src/irmap_emit.cpp",
       "src/irmap_build.cpp",
       "src/me_ir.cpp",
       "src/ssa_mir_nodes.cpp",
       "src/orig_symbol.cpp",
       "src/prop.cpp",
       "src/ssa.cpp",
       "src/ver_symbol.cpp",
       "src/ssa_tab.cpp",
       "src/ssa_pre.cpp",
       "src/ssa_epre.cpp",
       "src/ssa_epre_for_sr.cpp",
       "src/occur.cpp",
       "src/func_emit.cpp",
       ]

    include_dirs = include_directories
}

executable("mplme"){
    sources = [
        "src/me_driver.cpp",
    ]

    include_dirs = include_directories

    deps = [
        "${MAPLEALL_ROOT}/maple_ipa:libmplipa",
        ":libmplme",
        "${MAPLEALL_ROOT}/maple_ir:libmplir",
        "${MAPLEALL_ROOT}/mpl2mpl:libmpl2mpl",
        "${MAPLEALL_ROOT}/maple_phase:libmplphase",
        ":libmplmewpo",
        "${MAPLEALL_ROOT}/mempool:libmempool",
        "${MAPLEALL_ROOT}/maple_util:libmplutil",
        "${HUAWEI_SECURE_C_ROOT}:libHWSecureC",
    ]
}
